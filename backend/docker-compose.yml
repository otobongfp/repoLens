services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: repolens-neo4j
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"  # HTTP
      - "${NEO4J_BOLT_PORT:-7687}:7687"  # Bolt
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/password}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=${NEO4J_HEAP_INITIAL:-512m}
      - NEO4J_dbms_memory_heap_max__size=${NEO4J_HEAP_MAX:-2G}
      - NEO4J_dbms_memory_pagecache_size=${NEO4J_PAGECACHE:-1G}
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - repolens-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD:-password}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles:
      - databases
      - all

  # PostgreSQL with Vector Extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: repolens-postgres
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-vectordb}
      - POSTGRES_USER=${POSTGRES_USER:-repolens}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - repolens-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-repolens} -d ${POSTGRES_DB:-vectordb}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles:
      - databases
      - all

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: repolens-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - repolens-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    profiles:
      - databases
      - all

  # RepoLens Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT:-development}
    container_name: repolens-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Database Configuration - Use external URLs if provided, otherwise use Docker services
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - PGVECTOR_DB_URL=${PGVECTOR_DB_URL:-postgresql://repolens:password@postgres:5432/vectordb}
      
      # Redis Configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      
      # Application Configuration
      - APP_NAME=${APP_NAME:-RepoLens API}
      - APP_VERSION=${APP_VERSION:-2.0.0}
      - DEBUG=${DEBUG:-true}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # CORS Configuration
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000", "http://localhost:3001"]}
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
      
      # File Processing
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      
      # Development Mode
      - DEV_MODE=${DEV_MODE:-true}
      
      # AI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-4000}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.1}
      - AI_ANALYSIS_ENABLED=${AI_ANALYSIS_ENABLED:-true}
      - AI_MAX_TOKENS=${AI_MAX_TOKENS:-4000}
      - AI_TEMPERATURE=${AI_TEMPERATURE:-0.1}
      
      # AWS S3 Configuration
      - S3_BUCKET=${S3_BUCKET:-repolens}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      
      # Security Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key_here}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./storage:/app/storage
      - ./.env:/app/.env:ro
    networks:
      - repolens-network
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    profiles:
      - backend
      - all

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  repolens-network:
    driver: bridge