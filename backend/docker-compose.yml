version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: repolens-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - repolens-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PostgreSQL with Vector Extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: repolens-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=vectordb
      - POSTGRES_USER=repolens
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - repolens-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U repolens -d vectordb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: repolens-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - repolens-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # RepoLens Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: repolens-backend
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - PGVECTOR_DB_URL=postgresql://repolens:password@postgres:5432/vectordb
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      
      # Application Configuration
      - APP_NAME=RepoLens API
      - APP_VERSION=2.0.0
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      
      # CORS Configuration
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:3001"]
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      
      # File Processing
      - MAX_FILE_SIZE=10485760
      
      # Development Mode
      - DEV_MODE=true
      
      # AI Configuration (set these in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-4000}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.1}
      - AI_ANALYSIS_ENABLED=${AI_ANALYSIS_ENABLED:-true}
      - AI_MAX_TOKENS=${AI_MAX_TOKENS:-4000}
      - AI_TEMPERATURE=${AI_TEMPERATURE:-0.1}
      
      # AWS S3 Configuration (set these in .env file)
      - S3_BUCKET=${S3_BUCKET:-repolens}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      
      # Security Configuration (set these in .env file)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key_here}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    volumes:
      - ./storage:/app/storage
      - ./.env:/app/.env:ro
    networks:
      - repolens-network
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  repolens-network:
    driver: bridge
